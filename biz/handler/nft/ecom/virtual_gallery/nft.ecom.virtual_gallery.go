// Code generated by hertz generator.

package virtual_gallery

import (
	"context"
	"github.com/KArtorias/logs"
	"github.com/cloudwego/hertz/pkg/app"
	"nft/hertz_demo/biz/handler/nft/ecom/virtual_gallery/handlers"
	virtual_gallery "nft/hertz_demo/biz/model/nft/ecom/virtual_gallery"
)

// NftMarketSpace .
// @router /api/nft/market_space [GET]
func NftMarketSpace(ctx context.Context, c *app.RequestContext) {
	var err error
	var req virtual_gallery.NftMarketSpaceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(virtual_gallery.NftMarketSpaceResp)
	resp, err = handlers.MarketSpace(ctx, req)
	if err != nil {
		logs.CtxError(ctx, "handlers.MarketSpace(ctx, req) failed. req=%+v, err=%+v", req, err)
		c.String(400, err.Error())
		return
	}
	c.JSON(200, resp)
}

// NftHomepage .
// @router /api/nft/homepage [GET]
func NftHomepage(ctx context.Context, c *app.RequestContext) {
	var err error
	var req virtual_gallery.NftHomepageReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(virtual_gallery.NftHomepageResp)
	resp, err = handlers.HomePage(ctx, req)
	if err != nil {
		logs.CtxError(ctx, "handlers.HomePage(ctx, req) failed. req=%+v, err=%+v", req, err)
		c.String(400, err.Error())
		return
	}
	c.JSON(200, resp)
}

// NftMyTab .
// @router /api/nft/myTab [GET]
func NftMyTab(ctx context.Context, c *app.RequestContext) {
	var err error
	var req virtual_gallery.NftMyTabReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(virtual_gallery.NftMyTabResp)
	resp, err = handlers.MyTab(ctx, req)
	if err != nil {
		logs.CtxError(ctx, "handlers.MyTab(ctx, req) failed. req=%+v, err=%+v", req, err)
		c.String(400, err.Error())
		return
	}
	c.JSON(200, resp)
}
